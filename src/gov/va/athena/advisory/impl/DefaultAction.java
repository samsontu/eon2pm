
package gov.va.athena.advisory.impl;

import java.util.*;

import gov.va.athena.advisory.Action;

/**
 * Generated by Protege (http://protege.stanford.edu).
 * Source Class: Action
 *
 * @version generated on Wed Jun 06 18:58:08 GMT 2012
 */
public class DefaultAction extends DefaultAdvisory_Component implements Action {

    /* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((action_class == null) ? 0 : action_class.hashCode());
		result = prime * result
				+ ((kb_instance_id == null) ? 0 : kb_instance_id.hashCode());
		result = prime * result + ((label == null) ? 0 : label.hashCode());
		return result;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof DefaultAction)) {
			return false;
		}
		DefaultAction other = (DefaultAction) obj;
		if (action_class == null) {
			if (other.action_class != null) {
				return false;
			}
		} else if (!action_class.equals(other.action_class)) {
			return false;
		}
		if (kb_instance_id == null) {
			if (other.kb_instance_id != null) {
				return false;
			}
		} else if (!kb_instance_id.equals(other.kb_instance_id)) {
			return false;
		}
		if (label == null) {
			if (other.label != null) {
				return false;
			}
		} else if (!label.equals(other.label)) {
			return false;
		}
		return true;
	}

	protected String action_class = null;
    protected String kb_instance_id = null;
    protected String label = null;
    protected Collection<String> reference = new ArrayList();
    protected String description = null;
    protected String level_of_evidence = null;
    protected String net_benefit = null;
    protected String quality_of_evidence = null;
    protected String strength_of_recommendation = null;
    protected int fine_grain_priority = 0;
    protected Collection<String> subsidiary_message = new ArrayList();
    protected Collection<Action> collateral_action = new ArrayList();


    public DefaultAction() {
    }

    // Slot action_class
    public String getAction_class() {
        return action_class;
    }

    public boolean hasAction_class() {
        return action_class != null;
    }

    public void setAction_class(String newAction_class) {
        action_class = newAction_class;
    }

    // Slot case_id
    // Slot fine_grain_priority
    public int getFine_grain_priority() {
        return fine_grain_priority;
    }

    public boolean hasFine_grain_priority() {
        return (fine_grain_priority >= 0);
    }

    public void setFine_grain_priority(int newFine_grain_priority) {
        fine_grain_priority = newFine_grain_priority;
    }

    // Slot label
    public String getLabel() {
        return label;
    }

    public boolean hasLabel() {
        return label != null;
    }

    public void setLabel(String newLabel) {
        label = newLabel;
    }

    // Slot reference
    public Collection<String> getReference() {
        if (reference.isEmpty()) {
            return null;
        } else {
            return reference;
        }
    }

    public boolean hasReference() {
        return !reference.isEmpty();
    }

    public void addReference(String newReference) {
        reference.add(newReference);
    }

    public void removeReference(String oldReference) {
        reference.remove(oldReference);
    }

    public void setReference(Collection<String> newReference) {
        reference.addAll(newReference);
    }

    // Slot description
    public String getDescription() {
        return description;
    }

    public boolean hasDescription() {
        return description != null;
    }

    public void setDescription(String newDescription) {
        description = newDescription;
    }

    // Slot Overall_quality_evidence
    public String getOverall_quality_evidence() {
        return level_of_evidence;
    }

    public boolean hasOverall_quality_evidence() {
        return level_of_evidence != null;
    }

    public void setOverall_quality_evidence(String newOverall_quality_evidence) {
        level_of_evidence = newOverall_quality_evidence;
    }

    // Slot net_benefit
    public String getNet_benefit() {
        return net_benefit;
    }

    public boolean hasNet_benefit() {
        return net_benefit != null;
    }

    public void setNet_benefit(String newNet_benefit) {
        net_benefit = newNet_benefit;
    }

    // Slot quality_of_evidence
    public String getQuality_of_evidence() {
        return quality_of_evidence;
    }

    public boolean hasQuality_of_evidence() {
        return quality_of_evidence != null;
    }

    public void setQuality_of_evidence(String newQuality_of_evidence) {
        quality_of_evidence = newQuality_of_evidence;
    }

    // Slot grade_recommendation
    public String getGrade_recommendation() {
        return strength_of_recommendation;
    }

    public boolean hasGrade_recommendation() {
        return strength_of_recommendation != null;
    }

    public void setGrade_recommendation(String newGrade_recommendation) {
        strength_of_recommendation = newGrade_recommendation;
    }

    // Slot subsidiary_message

    public Collection<String> getSubsidiary_message() {
        if (subsidiary_message.isEmpty()) return null;
        else return subsidiary_message;
    }

    public boolean hasSubsidiary_message() {
        return !subsidiary_message.isEmpty();
    }


    public void addSubsidiary_message(String newSubsidiary_message) {
    	subsidiary_message.add(newSubsidiary_message);
    }


    public void removeSubsidiary_message(String oldSubsidiary_message) {
    	subsidiary_message.remove(oldSubsidiary_message);
    }


    public void setSubsidiary_message(Collection<String> newSubsidiary_message) {
    	subsidiary_message.addAll(newSubsidiary_message);
    }
    
    public Collection<Action> getCollateral_action() {
        if (collateral_action.isEmpty()) {
            return null;
        } else {
            return collateral_action;
        }
    }

    
    public boolean hasCollateral_action() {
        return !collateral_action.isEmpty();
    }

    public void addCollateral_action(Action newCollateral_action) {
        collateral_action.add(newCollateral_action);
    }

    public void removeCollateral_action(Action oldAction) {
        collateral_action.remove(oldAction);
    }

    public void setCollateral_action(Collection<Action> newAction) {
        collateral_action.addAll(newAction);
    }


    
    public boolean equals(Action anAction) {
       if (action_class.equals(anAction.getAction_class()) &&
           label.equals(anAction.getLabel()) ) 
          return true;
       else
          return false;
    }      
}
