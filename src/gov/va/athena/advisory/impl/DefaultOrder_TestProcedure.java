package gov.va.athena.advisory.impl;

import gov.va.athena.advisory.Message;
import gov.va.athena.advisory.Order_TestProcedure;

/**
 * Generated by Protege (http://protege.stanford.edu).
 * Source Class: Order_TestProcedure
 *
 * @version generated on Thu Jul 05 01:40:52 GMT 2012
 */
public class DefaultOrder_TestProcedure extends DefaultAction implements Order_TestProcedure {

    /* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime
				* result
				+ ((test_or_procedure == null) ? 0 : test_or_procedure
						.hashCode());
		result = prime * result + ((when == null) ? 0 : when.hashCode());
		return result;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (!super.equals(obj)) {
			return false;
		}
		if (!(obj instanceof DefaultOrder_TestProcedure)) {
			return false;
		}
		DefaultOrder_TestProcedure other = (DefaultOrder_TestProcedure) obj;
		if (test_or_procedure == null) {
			if (other.test_or_procedure != null) {
				return false;
			}
		} else if (!test_or_procedure.equals(other.test_or_procedure)) {
			return false;
		}
		if (when == null) {
			if (other.when != null) {
				return false;
			}
		} else if (!when.equals(other.when)) {
			return false;
		}
		return true;
	}

	protected String code;
    protected String coding_system;
    protected String test_or_procedure;
    protected String when;
    protected String when_lower_bound_unit;
    protected String when_upper_bound_unit;
    protected int when_lower_bound = 0;
    protected int when_upper_bound = 0;

    public DefaultOrder_TestProcedure() {
    }

    // Slot code
    public String getCode() {
        return code;
    }

    public boolean hasCode() {
        return (code != null);
    }

    public void setCode(String newCode) {
        code = newCode;
    }

    // Slot coding_system
    public String getCoding_system() {
        return coding_system;
    }

    public boolean hasCoding_system() {
        return (coding_system != null);
    }

    public void setCoding_system(String newCoding_system) {
        coding_system = newCoding_system;
    }

    // Slot test_or_procedure
    public String getTest_or_procedure() {
        return test_or_procedure;
    }

    public boolean hasTest_or_procedure() {
        return (test_or_procedure != null);
    }

    public void setTest_or_procedure(String newTest_or_procedure) {
        test_or_procedure = newTest_or_procedure;
    }

    // Slot when
    public String getWhen() {
        return when;
    }

    public boolean hasWhen() {
        return (when != null);
    }

    public void setWhen(String newWhen) {
        when = newWhen;
    }

    // Slot when_lower_bound_unit
    public String getWhen_lower_bound_unit() {
        return when_lower_bound_unit;
    }

    public boolean hasWhen_lower_bound_unit() {
        return (when_lower_bound_unit != null);
    }

    public void setWhen_lower_bound_unit(String newWhen_unit) {
        when_lower_bound_unit = newWhen_unit;
    }

    // Slot when_upper_bound_unit
    public String getWhen_upper_bound_unit() {
        return when_upper_bound_unit;
    }

    public boolean hasWhen_upper_bound_unit() {
        return (when_upper_bound_unit != null);
    }

    public void setWhen_upper_bound_unit(String newWhen_unit) {
        when_upper_bound_unit = newWhen_unit;
    }

    // Slot when_upper_bound
    public int getWhen_upper_bound() {
        return when_upper_bound;
    }

    public boolean hasWhen_upper_bound() {
        return (when_upper_bound != 0);
    }

    public void setWhen_upper_bound(int newWhen_lb) {
        when_upper_bound = newWhen_lb;
    }

    // Slot when_lower_bound
    public int getWhen_lower_bound() {
        return when_lower_bound;
    }

    public boolean hasWhen_lower_bound() {
        return (when_lower_bound != 0);
    }

    public void setWhen_lower_bound(int newWhen_lb) {
        when_lower_bound = newWhen_lb;
    }
    
    public boolean equals(Order_TestProcedure anOrder)  {
      if (!super.equals( anOrder )) 
        return false;
      if (!test_or_procedure.equals(anOrder.getTest_or_procedure()) )
        return false;
      return true;
    }     
}
