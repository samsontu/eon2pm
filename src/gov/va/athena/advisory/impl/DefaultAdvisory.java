package gov.va.athena.advisory.impl;

import java.util.*;

//import edu.stanford.smi.eon.PCAServerModule.Guideline_Service_Record;

import gov.va.athena.advisory.*;

/**
 * Generated by Protege (http://protege.stanford.edu).
 * Source Class: Advisory
 *
 * @version generated on Wed Jun 06 18:58:08 GMT 2012
 */
public class DefaultAdvisory implements Advisory {

    protected String advisory_id;
    protected String hospitalization_id;
    protected String advisory_time;
    protected String start_time;
    protected String stop_time;
    protected String assumption = null;
    protected String case_id = null;
    protected String guideline_id = null;
    protected String station = null;
    protected String debugHTML = null;
    protected String inputData = null;
    protected String provider = null;
    protected Collection<Drug_Recommendation> drug_recommendation = new ArrayList();
    protected Collection<Conclusion> patient_characteristic = new ArrayList();
    protected Collection<Guideline_Goal> evaluated_goal = new ArrayList();
    protected Collection<Action> recommended_action = new ArrayList();
    //protected Collection<Exclusion> exclusion = new ArrayList();

    public DefaultAdvisory() {
    }

    // Slot advisory_id
    public String getAdvisory_id() {
        return advisory_id;
    }

    public boolean hasAdvisory_id() {
        return advisory_id != null;
    }

    public void setAdvisory_id(String newAdvisory_id) {
        advisory_id = newAdvisory_id;
    }

    // Slot hospitalization_id
    public String getHospitalization_id() {
        return hospitalization_id;
    }

    public boolean hasHospitalization_id() {
        return hospitalization_id != null;
    }

    public void setHospitalization_id(String newHospitalization_id) {
        hospitalization_id = newHospitalization_id;
    }

    // Slot advisory_time
    public String getAdvisory_time() {
        return advisory_time;
    }

    public boolean hasAdvisory_time() {
        return advisory_time != null;
    }

    public void setAdvisory_time(String newAdvisory_time) {
        advisory_time = newAdvisory_time;
    }

    // Slot start_time (PMP start time)
    public String getStart_time() {
        return start_time;
    }

    public boolean hasStart_time() {
        return start_time != null;
    }

    public void setStart_time(String newStart_time) {
        start_time = newStart_time;
    }

    // Slot stop_time (PMP stop time)
    public String getStop_time() {
        return stop_time;
    }

    public boolean hasStop_time() {
        return stop_time != null;
    }

    public void setStop_time(String newStop_time) {
        stop_time = newStop_time;
    }

    // Slot assumption
    public String getAssumption() {
        return assumption;
    }

    public boolean hasAssumption() {
        return assumption != null;
    }

    public void setAssumption(String newAssumption) {
        assumption = newAssumption;
    }

    // Slot case_id
    public String getCase_id() {
        return case_id;
    }

    public boolean hasCase_id() {
        return case_id != null;
    }

    public void setCase_id(String newCase_id) {
        case_id = newCase_id;
    }

    // Slot provider
    public String getProvider() {
        return provider;
    }

    public boolean hasProvider() {
        return provider != null;
    }

    public void setProvider(String newProvider) {
        provider = newProvider;
    }

    // Slot station
    public String getStation() {
        return station;
    }

    public boolean hasStation() {
        return station != null;
    }

    public void setStation(String newStation) {
        station = newStation;
    }
    
    // debugHTML: debugging information(patient data, scenarios, action choices, recommendations) in HTML format all in 1 String
    public String getDebugHTML()  { return debugHTML; }
    public boolean hasDebugHTML(){ 
      return debugHTML != null;
    }
    public void setDebugHTML(String debugData) {
      debugHTML = debugData; 
    }   
    
    // inputData: debugging information(patient data only in HTML format all in 1 String
    public String getInputData()  { return inputData; }
    public boolean hasInputData(){ 
      return inputData != null;
    }
    public void setInputData(String inputHTMLData) {
      inputData = inputHTMLData; 
    }       

    // Slot drug_recommendation
    public Collection<Drug_Recommendation> getDrug_recommendation() {
        if (drug_recommendation.isEmpty()) {
            return null;
        } else {
            return drug_recommendation;
        }
    }

    public boolean hasDrug_recommendation() {
        return !drug_recommendation.isEmpty();
    }

    public void addDrug_recommendation(Drug_Recommendation newDrug_recommendation) {
        drug_recommendation.add(newDrug_recommendation);
    }

    public void removeDrug_recommendation(Drug_Recommendation oldDrug_recommendation) {
        drug_recommendation.remove(oldDrug_recommendation);
    }

    public void setDrug_recommendation(Collection<? extends Drug_Recommendation> newDrug_recommendation) {
        drug_recommendation.addAll(newDrug_recommendation);
    }

    // Slot evaluated_goal
    public Collection<Guideline_Goal> getEvaluated_goal() {
        if (evaluated_goal.isEmpty()) {
            return null;
        } else {
            return evaluated_goal;
        }
    }

    public boolean hasEvaluated_goal() {
        return !evaluated_goal.isEmpty();
    }

    public void addEvaluated_goal(Guideline_Goal newEvaluated_goal) {
        evaluated_goal.add(newEvaluated_goal);
    }

    public void removeEvaluated_goal(Guideline_Goal oldEvaluated_goal) {
        evaluated_goal.remove(oldEvaluated_goal);
    }

    public void setEvaluated_goal(Collection<? extends Guideline_Goal> newEvaluated_goal) {
        evaluated_goal.addAll(newEvaluated_goal);
    }

    // Slot guideline_id
    public String getGuideline_id() {
        return guideline_id;
    }

    public boolean hasGuideline_id() {
        return guideline_id != null;
    }

    public void setGuideline_id(String newGuideline_id) {
        guideline_id = newGuideline_id;
    }

    // Slot patient_characteristic
    public Collection<Conclusion> getPatient_characteristic() {
        if (patient_characteristic.isEmpty()) {
            return null;
        } else {
            return patient_characteristic;
        }
    }

    public boolean hasPatient_characteristic() {
        return !patient_characteristic.isEmpty();
    }

    public void addPatient_characteristic(Conclusion newPatient_characteristic) {
        patient_characteristic.add(newPatient_characteristic);
    }

    public void removePatient_characteristic(Conclusion oldPatient_characteristic) {
        patient_characteristic.remove(oldPatient_characteristic);
    }

    public void setPatient_characteristic(Collection<? extends Conclusion> newPatient_characteristic) {
        patient_characteristic.addAll(newPatient_characteristic);
    }

    // Slot recommended_action
    public Collection<Action> getRecommended_action() {
        if (recommended_action.isEmpty()) {
            return null;
        } else {
            return recommended_action;
        }
    }

    public boolean hasRecommended_action() {
        return !recommended_action.isEmpty();
    }

    public void addRecommended_action(Action newRecommended_action) {
        recommended_action.add(newRecommended_action);
    }

    public void removeRecommended_action(Action oldRecommended_action) {
        recommended_action.remove(oldRecommended_action);
    }

    public void setRecommended_action(Collection<? extends Action> newRecommended_action) {
        recommended_action.addAll(newRecommended_action);
    }
    
    // Slot patient_characteristic
    /*
    public Collection<Exclusion> getExclusion() {
    if (exclusion.isEmpty()) {
    return null;
    } else {
    return exclusion;
    }
    }
    
    public boolean hasExclusion() {
    return !exclusion.isEmpty();
    }
    
    public void addExclusion(Exclusion newExclusion) {
    exclusion.add(newExclusion);
    }
    
    public void removeExclusion(Exclusion oldExclusion) {
    exclusion.remove(oldExclusion);
    }
    
    public void setExclusion(Collection<? extends Exclusion> newExclusion) {
    exclusion.addAll(newExclusion);
    }
     */
    /*
    @Override
    public Advisory instantiate(Guideline_Service_Record dssOutput) {
    if (dssOutput.assessments == null)
    this.assumption=null;
    else {
    this.assumption = dssOutput.assumption.support;
    }
    return this;
    }
    */
//    edu.stanford.smi.eon.PCAServerModule.Criteria_Evaluation assumption,
//    edu.stanford.smi.eon.PCAServerModule.Guideline_Action_Choices[] decision_points,
//    edu.stanford.smi.eon.PCAServerModule.Guideline_Activity_Choices[] activity_choices,
//    edu.stanford.smi.eon.PCAServerModule.Guideline_Activity_Evaluations[] evaluated_choices,
//    edu.stanford.smi.eon.PCAServerModule.Guideline_Scenario_Choices[] scenario_choices,
//    edu.stanford.smi.eon.PCAServerModule.Guideline_Goal[] goals,
//    edu.stanford.smi.eon.PCAServerModule.Conclusion[] subject_classification,
//    edu.stanford.smi.eon.PCAServerModule.Current_Activity_Assessment[] assessments,
//    edu.stanford.smi.eon.PCAServerModule.Data_To_Collect[] questions
}
